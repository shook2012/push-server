<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   http://www.springframework.org/schema/security 
   http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- To use the new expression-based syntax, enable pre-post-annotations. 
		This uses Spring Security's native annotations which provide more powerful 
		support than the standards-based @Secured and JSR-250 annotations See Spring 
		Security 3.1 Reference 2.4 Method Security - http://static.springsource.org/spring-security/site/docs/3.1.x/reference/ns-config.html#ns-protect-pointcut 
		- http://static.springsource.org/spring-security/site/docs/3.1.x/reference/appendix-namespace.html#d0e8651 
		See Spring Security 3.1 Referecne 15.1.1 Common Built-In Expressions - http://static.springsource.org/spring-security/site/docs/3.1.x/reference/el-access.html 
		<security:global-method-security pre-post-annotations="enabled" /> -->

	<!-- This is where we configure Spring-Security -->
	<security:http auto-config="true" use-expressions="true"
		access-denied-page="/auth/prohibido">

		<security:http-basic />

		<!-- security:form-login login-page="/auth/login" authentication-failure-url="/auth/login?error=true" 
			default-target-url="/notificaciones/listado.htm" /> <security:logout invalidate-session="true" 
			logout-success-url="/auth/login" logout-url="/auth/logout" /> -->

	</security:http>

	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			user-service-ref="myUserDetailsService">
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

	<bean
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"
		id="passwordEncoder" />
</beans>